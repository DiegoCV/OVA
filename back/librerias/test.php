<?php
require_once ('vendor/autoload.php');
use \Statickidz\GoogleTranslate;

$source = 'en';
$target = 'es';
$text = 'The interaction-oriented software architecture decomposes the system into three major partitions: data module, control module, and view presentation module. Each module has its own responsibilities. The data module provides the data abstraction and all core business logic on data processing. The view presentation module is responsible for visual or audio data output presentation and may also provide user input interface when necessary. The control module determines the flow of control involving view selections, communications between modules, job dispatching, and certain data initialization and system configuration actions. The key point of this architecture is its separation of user interactions from data abstraction and business data processing. Since there may be many view presentations in different formats, multiple views may be supported for the same data set. Even for a specific view presentation, the interfaces or views may need to change often, so loose coupling between data abstractions and its presentations is helpful and is supported by this style. The loose coupling connections can be implemented in a variety of ways such as explicit method invocation or implicit registration/notification method invocation. The control module plays a central role that mediates the data module and view presentation modules. All three modules may be fully connected.The interaction-oriented software architecture decomposes the system into three major partitions: data module, control module, and view presentation module. Each module has its own responsibilities. The data module provides the data abstraction and all core business logic on data processing. The view presentation module is responsible for visual or audio data output presentation and may also provide user input interface when necessary. The control module determines the flow of control involving view selections, communications between modules, job dispatching, and certain data initialization and system configuration actions. The key point of this architecture is its separation of user interactions from data abstraction and business data processing. Since there may be many view presentations in different formats, multiple views may be supported for the same data set. Even for a specific view presentation, the interfaces or views may need to change often, so loose coupling between data abstractions and its presentations is helpful and is supported by this style. The loose coupling connections can be implemented in a variety of ways such as explicit method invocation or implicit registration/notification method invocation. The control module plays a central role that mediates the data module and view presentation modules. All three modules may be fully connected.';

$trans = new GoogleTranslate();
$result = $trans->translate($source, $target, $text);

echo $result;